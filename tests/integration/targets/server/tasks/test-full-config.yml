---
- name: Run tests
  block:
    - name: create ssh key for server testing
      cherryservers.cloud.sshkey:
        label: "{{ fake_key_label }}"
        key: "{{ fake_public_key }}"
        auth_token: "{{ cherryservers_api_key }}"
      register: sshkey
    - name: verify create ssh key for server testing
      ansible.builtin.assert:
        that:
          - sshkey is changed

    - name: create floating ip for server testing
      cherryservers.cloud.floating_ip:
        auth_token: "{{ cherryservers_api_key }}"
        region: "{{ server_region }}"
        project_id: "{{ cherryservers_project_id }}"
      register: fip
    - name: verify create floating ip for server testing
      ansible.builtin.assert:
        that:
          fip is changed

    - name: test create server with check mode
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        region: "{{ server_region }}"
        plan: "{{ server_plan }}"
        hostname: "{{ server_hostname }}"
        image: "{{ server_image }}"
        tags: "{{ server_tags }}"
        active_timeout: "{{ server_active_timeout }}"
        user_data: "{{ server_user_data }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        extra_ip_addresses: [ "{{ fip.cherryservers_floating_ip.id }}" ]
      register: server
      check_mode: true
    - name: verify create server with check mode
      ansible.builtin.assert:
        that:
          - server is changed

    - name: test no server actually created
      cherryservers.cloud.server_info:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        hostname: "{{ server_hostname }}"
      register: result
    - name: verify no server actually created
      ansible.builtin.assert:
        that:
          - result.cherryservers_servers | list | count == 0
          - result is not changed

    - name: test create server
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        region: "{{ server_region }}"
        plan: "{{ server_plan }}"
        hostname: "{{ server_hostname }}"
        image: "{{ server_image }}"
        tags: "{{ server_tags }}"
        active_timeout: "{{ server_active_timeout }}"
        user_data: "{{ server_user_data }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        extra_ip_addresses: [ "{{ fip.cherryservers_floating_ip.id }}" ]
      register: server
    - name: verify create server
      ansible.builtin.assert:
        that:
          - server is changed

    - name: test server actually created
      cherryservers.cloud.server_info:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ server.cherryservers_server.id }}"
      register: result
    - name: verify server actually created
      ansible.builtin.assert:
        that:
          - result.cherryservers_servers | list | count == 1
          - result.cherryservers_servers[0].project_id == cherryservers_project_id
          - result.cherryservers_servers[0].region == server_region
          - result.cherryservers_servers[0].plan == server_plan
          - result.cherryservers_servers[0].image == server_image
          - result.cherryservers_servers[0].hostname == server_hostname
          - result.cherryservers_servers[0].tags == server_tags
          - result.cherryservers_servers[0].ssh_keys[0] == sshkey.cherryservers_sshkey.id
          - result.cherryservers_servers[0].ip_addresses | list | count == 3

    - name: test server creation idempotency with check mode
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        region: "{{ server_region }}"
        plan: "{{ server_plan }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_tags }}"
        active_timeout: "{{ server_active_timeout }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        image: "{{ server_image }}"
        extra_ip_addresses: [ "{{ fip.cherryservers_floating_ip.id }}" ]
      register: result
      check_mode: true
    - name: verify server creation idempotency with check mode
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test server creation idempotency
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        region: "{{ server_region }}"
        plan: "{{ server_plan }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_tags }}"
        active_timeout: "{{ server_active_timeout }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        image: "{{ server_image }}"
        extra_ip_addresses: [ "{{ fip.cherryservers_floating_ip.id }}" ]
      register: result
    - name: verify server creation idempotency
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test reinstall server with no allow_reinstall
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        hostname: "{{ server_hostname }}"
        project_id: "{{ cherryservers_project_id }}"
        tags: "{{ server_update_tags }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        user_data: "{{ server_user_data }}"
        image: "{{ server_reinstall_image }}"
      ignore_errors: true
      register: result
    - name: verify reinstall server with no allow_reinstall
      ansible.builtin.assert:
        that:
          - result is failed

    - name: test reinstall server with check mode
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_update_tags }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        user_data: "{{ server_user_data }}"
        image: "{{ server_reinstall_image }}"
        allow_reinstall: "true"
      check_mode: true
      register: result
    - name: verify reinstall server with check mode
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test no server reinstall actually happened
      cherryservers.cloud.server_info:
        id: "{{ server.cherryservers_server.id }}"
        auth_token: "{{ cherryservers_api_key }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_update_tags }}"
        image: "{{ server_reinstall_image }}"
      register: result
    - name: verify no reinstall actually happened
      ansible.builtin.assert:
        that:
          - result.cherryservers_servers | list | count == 0
          - result is not changed

    - name: test reinstall server
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        hostname: "{{ server_hostname }}"
        project_id: "{{ cherryservers_project_id }}"
        tags: "{{ server_update_tags }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        user_data: "{{ server_user_data }}"
        image: "{{ server_reinstall_image }}"
        allow_reinstall: "true"
      register: result
    - name: verify reinstall server
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test reinstall server actually happened
      cherryservers.cloud.server_info:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_update_tags }}"
        image: "{{ server_reinstall_image }}"
      register: result
    - name: verify reinstall server actually happened
      ansible.builtin.assert:
        that:
          - result.cherryservers_servers | list | count == 1
          - result.cherryservers_servers[0].tags == server_update_tags
          - result.cherryservers_servers[0].image == server_reinstall_image
          - result.cherryservers_servers[0].ssh_keys[0] == sshkey.cherryservers_sshkey.id

    - name: test server reinstall idempotency with check mode
      cherryservers.cloud.server:
        project_id: "{{ cherryservers_project_id }}"
        auth_token: "{{ cherryservers_api_key }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_update_tags }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        image: "{{ server_reinstall_image }}"
        allow_reinstall: "true"
      register: result
      check_mode: true
    - name: verify server reinstall idempotency with check mode
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test server reinstall idempotency
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ cherryservers_project_id }}"
        hostname: "{{ server_hostname }}"
        tags: "{{ server_update_tags }}"
        ssh_keys: [ "{{ sshkey.cherryservers_sshkey.id }}" ]
        image: "{{ server_reinstall_image }}"
        allow_reinstall: "true"
      register: result
    - name: verify server reinstall idempotency
      ansible.builtin.assert:
        that:
          - result is not changed

  always:
    - name: delete servers
      cherryservers.cloud.server:
        project_id: "{{ cherryservers_project_id }}"
        hostname: "{{ server_hostname }}"
        auth_token: "{{ cherryservers_api_key }}"
        state: absent
    - name: delete ssh key
      cherryservers.cloud.sshkey:
        id: "{{ sshkey.cherryservers_sshkey.id }}"
        auth_token: "{{ cherryservers_api_key }}"
        state: absent
    - name: delete floating ip
      cherryservers.cloud.floating_ip:
        id: "{{ fip.cherryservers_floating_ip.id }}"
        auth_token: "{{ cherryservers_api_key }}"
        state: absent