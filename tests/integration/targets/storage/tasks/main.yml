---
- name: Run tests
  block:
    - name: create project
      cherryservers.cloud.project:
        auth_token: "{{ cherryservers_api_key }}"
        name: "ansible-test-storage"
        team_id: "{{ cherryservers_team_id }}"
      register: project

    - name: create baremetal server
      cherryservers.cloud.server:
        auth_token: "{{ cherryservers_api_key }}"
        region: "{{ storage_region }}"
        plan: "{{ cherryservers_baremetal_plan_slug }}"
        project_id: "{{ project.cherryservers_project.id }}"
      register: server

    # Error 500 if attaching storage right after server creation.
    - name: Wait for server
      ansible.builtin.pause:
        seconds: 120

    - name: test create storage with missing parameters
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ project.cherryservers_project.id }}"
        region: "{{ storage_region }}"
      register: storage
      ignore_errors: true
    - name: verify create storage with missing parameters
      ansible.builtin.assert:
        that:
          - storage is failed

    - name: test create storage with check mode
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ project.cherryservers_project.id }}"
        region: "{{ storage_region }}"
        target_server_id: "{{ server.cherryservers_server.id }}"
        description: "{{ storage_description }}"
        size: "{{ storage_size }}"
      register: storage
      check_mode: true
    - name: verify create storage with check mode
      ansible.builtin.assert:
        that:
          - storage is changed

    - name: test no storage actually created
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ project.cherryservers_project.id }}"
        description: "{{ storage_description }}"
        target_server_id: "{{ server.cherryservers_server.id }}"
      register: result
    - name: verify no storage actually created
      ansible.builtin.assert:
        that:
          - result.cherryservers_storages | list | count == 0

    - name: test create storage
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ project.cherryservers_project.id }}"
        region: "{{ storage_region }}"
        target_server_id: "{{ server.cherryservers_server.id }}"
        description: "{{ storage_description }}"
        size: "{{ storage_size }}"
      register: storage
    - name: verify create storage
      ansible.builtin.assert:
        that:
          - storage is changed

    - name: test storage actually created
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ storage.cherryservers_storage.id }}"
      register: result
    - name: verify storage actually created
      ansible.builtin.assert:
        that:
          - result.cherryservers_storages | list | count == 1
          - result.cherryservers_storages[0].region == storage_region
          - result.cherryservers_storages[0].target_server_id == cherryservers_baremetal_server_id
          - result.cherryservers_storages[0].state == "attached"
          - result.cherryservers_storages[0].size == storage_size
          - result.cherryservers_storages[0].description == storage_description

    - name: test create storage idempotency with check mode
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ storage.cherryservers_storage.id }}"
        project_id: "{{ project.cherryservers_project.id }}"
        region: "{{ storage_region }}"
        target_server_id: "{{ server.cherryservers_server.id }}"
        description: "{{ storage_description }}"
        size: "{{ storage_size }}"
      register: result
      check_mode: true
    - name: verify create storage idempotency with check mode
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test create storage idempotency
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ storage.cherryservers_storage.id }}"
        project_id: "{{ project.cherryservers_project.id }}"
        region: "{{ storage_region }}"
        target_server_id: "{{ server.cherryservers_server.id }}"
        description: "{{ storage_description }}"
        size: "{{ storage_size }}"
      register: result
    - name: verify create storage idempotency
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test update storage with check mode
      cherryservers.cloud.storage:
        id: "{{ storage.cherryservers_storage.id }}"
        auth_token: "{{ cherryservers_api_key }}"
        description: "{{ storage_updated_description }}"
        size: "{{ storage_updated_size }}"
        state: "detached"
      check_mode: true
      register: result
    - name: verify update storage with check mode
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test storage is not updated
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ storage.cherryservers_storage.id }}"
      register: result
    - name: verify storage is not updated
      ansible.builtin.assert:
        that:
          - result.cherryservers_storages[0].size == storage_size
          - result.cherryservers_storages[0].description == storage_description
          - result.cherryservers_storages[0].state == "attached"

    - name: test update storage
      cherryservers.cloud.storage:
        id: "{{ storage.cherryservers_storage.id }}"
        auth_token: "{{ cherryservers_api_key }}"
        description: "{{ storage_updated_description }}"
        size: "{{ storage_updated_size }}"
        state: "detached"
      register: storage
    - name: verify update storage
      ansible.builtin.assert:
        that:
          - storage is changed

    # We need this, because a new storage with a new ID is actually created.
    - name: Wait for backend
      ansible.builtin.pause:
        seconds: 15

    - name: test storage is updated
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        project_id: "{{ project.cherryservers_project.id }}"
        description: "{{ storage_updated_description }}"
      register: updated_storage
    - name: verify storage is updated
      ansible.builtin.assert:
        that:
          - updated_storage.cherryservers_storages[0].size == storage_updated_size
          - updated_storage.cherryservers_storages[0].description == storage_updated_description
          - updated_storage.cherryservers_storages[0].state == "detached"

    - name: test update storage idempotency with check mode
      cherryservers.cloud.storage:
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
        auth_token: "{{ cherryservers_api_key }}"
        description: "{{ storage_updated_description }}"
        size: "{{ storage_updated_size }}"
        state: "detached"
      register: result
      check_mode: true
    - name: verify update storage idempotency with check mode
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test update storage idempotency
      cherryservers.cloud.storage:
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
        auth_token: "{{ cherryservers_api_key }}"
        description: "{{ storage_updated_description }}"
        size: "{{ storage_updated_size }}"
        state: "detached"
      register: result
    - name: verify update storage idempotency
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test attach storage
      cherryservers.cloud.storage:
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
        auth_token: "{{ cherryservers_api_key }}"
        target_server_id: "{{ server.cherryservers_server.id }}"
      register: result
    - name: verify attach storage
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test storage is attached
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
    - name: verify storage is attached
      ansible.builtin.assert:
        that:
          - result.cherryservers_storages[0].state == "attached"

    - name: test delete storage without id
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        state: "absent"
      register: result
      ignore_errors: true
    - name: verify delete storage without id
      ansible.builtin.assert:
        that:
          - result is failed

    - name: test delete storage with check mode
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        state: "absent"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
      check_mode: true
    - name: verify delete storage with check mode
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test no storage actually deleted
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
    - name: verify no storage actually deleted
      ansible.builtin.assert:
        that:
          - result.cherryservers_storages | list | count == 1

    - name: test delete storage
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        state: "absent"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
    - name: verify delete storage
      ansible.builtin.assert:
        that:
          - result is changed

    - name: test storage actually deleted
      cherryservers.cloud.storage_info:
        auth_token: "{{ cherryservers_api_key }}"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
      ignore_errors: true
    - name: verify storage actually deleted
      ansible.builtin.assert:
        that:
          - result is failed

    - name: test storage delete idempotency with check mode
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        state: "absent"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
      check_mode: true
    - name: verify storage delete idempotency with check mode
      ansible.builtin.assert:
        that:
          - result is not changed

    - name: test storage delete idempotency
      cherryservers.cloud.storage:
        auth_token: "{{ cherryservers_api_key }}"
        state: "absent"
        id: "{{ updated_storage.cherryservers_storages[0].id }}"
      register: result
    - name: verify storage delete idempotency
      ansible.builtin.assert:
        that:
          - result is not changed

  always:
    - name: delete project
      cherryservers.cloud.project:
        id: "{{ project.cherryservers_project.id }}"
        auth_token: "{{ cherryservers_api_key }}"
        state: absent
